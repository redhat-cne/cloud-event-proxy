# cert-manager Certificate for client mTLS
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cloud-event-consumer-mtls
  namespace: cloud-events
spec:
  secretName: cloud-event-consumer-mtls-tls
  issuerRef:
    name: openshift-cluster-issuer
    kind: ClusterIssuer
  dnsNames:
  - cloud-event-consumer.cloud-events.svc.cluster.local
  - cloud-event-consumer.cloud-events.svc
  - cloud-event-consumer
  usages:
  - digital signature
  - key encipherment
  - client auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-consumer-deployment
  namespace: cloud-events
  labels:
    app: consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        app: consumer
    spec:
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      serviceAccountName: consumer-sa
      containers:
        - name: cloud-event-consumer
          image: cloud-event-consumer
          imagePullPolicy: Always
          args:
            - "--local-api-addr=consumer-events-subscription-service.cloud-events.svc.cluster.local:9043"
            - "--api-path=/api/ocloudNotifications/v2/"
            - "--http-event-publishers=ptp-event-publisher-service-NODE_NAME.openshift-ptp.svc.cluster.local:9043"
            - "--auth-config=/etc/cloud-event-consumer/auth/config.json"
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CONSUMER_TYPE
              value: "PTP"
            - name: ENABLE_STATUS_CHECK
              value: "true"
            - name: SERVICE_ACCOUNT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: consumer-sa-token
                  key: token
            - name: OAUTH_ISSUER
              value: "https://oauth-openshift.apps.openshift.example.com"
            - name: OAUTH_JWKS_URL
              value: "https://oauth-openshift.apps.openshift.example.com/.well-known/openid_configuration"
          volumeMounts:
            - name: pubsubstore
              mountPath: /store
            - name: client-certs
              mountPath: /etc/cloud-event-consumer/client-certs
              readOnly: true
            - name: ca-bundle
              mountPath: /etc/cloud-event-consumer/ca-bundle
              readOnly: true
            - name: auth-config
              mountPath: /etc/cloud-event-consumer/auth
              readOnly: true
            - name: service-account-token
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
      volumes:
        - name: pubsubstore
          emptyDir: {}
        - name: client-certs
          secret:
            secretName: cloud-event-consumer-mtls-tls
        - name: ca-bundle
          secret:
            secretName: cloud-event-proxy-ca-tls
        - name: auth-config
          configMap:
            name: consumer-auth-config
        - name: service-account-token
          projected:
            sources:
            - serviceAccountToken:
                path: token
                expirationSeconds: 3600
---
# ServiceAccount for consumer with OAuth authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: consumer-sa
  namespace: cloud-events
---
# Role for OAuth token validation
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: cloud-events
  name: consumer-oauth
rules:
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
- apiGroups: ["user.openshift.io"]
  resources: ["users", "groups"]
  verbs: ["get", "list"]
---
# RoleBinding for OAuth
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: consumer-oauth
  namespace: cloud-events
subjects:
- kind: ServiceAccount
  name: consumer-sa
  namespace: cloud-events
roleRef:
  kind: Role
  name: consumer-oauth
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRole for cert-manager access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: consumer-cert-manager
rules:
- apiGroups: ["cert-manager.io"]
  resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
---
# ClusterRoleBinding for cert-manager access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: consumer-cert-manager
subjects:
- kind: ServiceAccount
  name: consumer-sa
  namespace: cloud-events
roleRef:
  kind: ClusterRole
  name: consumer-cert-manager
  apiGroup: rbac.authorization.k8s.io
---
# ConfigMap for consumer authentication configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: consumer-auth-config
  namespace: cloud-events
data:
  config.json: |
    {
      "enableMTLS": true,
      "clientCertPath": "/etc/cloud-event-consumer/client-certs/tls.crt",
      "clientKeyPath": "/etc/cloud-event-consumer/client-certs/tls.key",
      "caCertPath": "/etc/cloud-event-consumer/ca-bundle/ca.crt",
      "certManagerIssuer": "openshift-cluster-issuer",
      "certManagerNamespace": "cloud-events",
      "enableOAuth": true,
      "oauthIssuer": "https://oauth-openshift.apps.openshift.example.com",
      "oauthJWKSURL": "https://oauth-openshift.apps.openshift.example.com/.well-known/openid_configuration",
      "requiredScopes": ["user:info", "user:check-access"],
      "requiredAudience": "openshift",
      "serviceAccountName": "consumer-sa",
      "serviceAccountToken": "/var/run/secrets/kubernetes.io/serviceaccount/token",
      "authenticationOperator": true
    }
