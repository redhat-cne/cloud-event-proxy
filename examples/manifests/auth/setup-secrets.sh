#!/bin/bash

# setup-secrets.sh - Script to set up authentication secrets for cloud-event-consumer
# This script creates the necessary secrets for mTLS authentication using OpenShift Service CA

set -e

NAMESPACE="cloud-events"
CLUSTER_NAME="${CLUSTER_NAME:-openshift.local}"

echo "Setting up authentication secrets for cloud-event-consumer..."
echo "Using cluster name: $CLUSTER_NAME"

# Check if we're in an OpenShift cluster
if ! oc get project openshift-service-ca >/dev/null 2>&1; then
    echo "Error: This script requires OpenShift with Service CA operator"
    echo "For generic Kubernetes, please follow the manual certificate generation instructions in auth/certificate-example.md"
    exit 1
fi

echo "✓ OpenShift Service CA detected"

# Wait for the Service CA ConfigMap to be injected
echo "Waiting for Service CA to inject CA bundle into ConfigMap..."
TIMEOUT=60
COUNT=0
while [ $COUNT -lt $TIMEOUT ]; do
    if oc get configmap server-ca-bundle-configmap -n $NAMESPACE -o jsonpath='{.data.service-ca\.crt}' 2>/dev/null | grep -q "BEGIN CERTIFICATE"; then
        echo "✓ Service CA bundle found"
        break
    fi
    echo "Waiting for Service CA to inject CA bundle... ($COUNT/$TIMEOUT)"
    sleep 2
    COUNT=$((COUNT + 1))
done

if [ $COUNT -eq $TIMEOUT ]; then
    echo "Error: Timeout waiting for Service CA to inject CA bundle"
    echo "Please check that the ConfigMap server-ca-bundle-configmap exists and has the annotation service.beta.openshift.io/inject-cabundle: 'true'"
    exit 1
fi

# Extract the CA certificate and create the secret
echo "Creating server-ca-bundle secret..."
CA_CERT=$(oc get configmap server-ca-bundle-configmap -n $NAMESPACE -o jsonpath='{.data.service-ca\.crt}')

# Create the server-ca-bundle secret
oc create secret generic server-ca-bundle \
  --from-literal=service-ca.crt="$CA_CERT" \
  --namespace=$NAMESPACE \
  --dry-run=client -o yaml | oc apply -f -

echo "✓ server-ca-bundle secret created"

# Wait for the client certificate to be generated by Service CA
echo "Waiting for Service CA to generate client certificate..."
COUNT=0
while [ $COUNT -lt $TIMEOUT ]; do
    if oc get secret consumer-client-certs -n $NAMESPACE >/dev/null 2>&1; then
        echo "✓ consumer-client-certs secret found"
        break
    fi
    echo "Waiting for Service CA to generate client certificate... ($COUNT/$TIMEOUT)"
    sleep 2
    COUNT=$((COUNT + 1))
done

if [ $COUNT -eq $TIMEOUT ]; then
    echo "Error: Timeout waiting for Service CA to generate client certificate"
    echo "Please check that the Service consumer-client-service exists and has the annotation service.beta.openshift.io/serving-cert-secret-name: consumer-client-certs"
    exit 1
fi

echo "✓ All authentication secrets are ready"

# Create/update the consumer authentication ConfigMap with dynamic cluster name
echo "Creating consumer authentication ConfigMap..."
# Delete existing ConfigMap to ensure clean update with new cluster name
oc delete configmap consumer-auth-config -n $NAMESPACE --ignore-not-found=true
cat <<EOF | oc apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: consumer-auth-config
  namespace: $NAMESPACE
data:
  config.json: |
    {
      "enableMTLS": true,
      "useServiceCA": true,
      "clientCertPath": "/etc/cloud-event-consumer/client-certs/tls.crt",
      "clientKeyPath": "/etc/cloud-event-consumer/client-certs/tls.key",
      "caCertPath": "/etc/cloud-event-consumer/ca-bundle/service-ca.crt",
      "enableOAuth": true,
      "useOpenShiftOAuth": true,
      "oauthIssuer": "https://oauth-openshift.apps.$CLUSTER_NAME",
      "oauthJWKSURL": "https://oauth-openshift.apps.$CLUSTER_NAME/oauth/jwks",
      "requiredScopes": ["user:info"],
      "requiredAudience": "https://kubernetes.default.svc",
      "serviceAccountName": "consumer-sa",
      "serviceAccountToken": "/var/run/secrets/kubernetes.io/serviceaccount/token"
    }
EOF

echo "✓ consumer-auth-config ConfigMap created/updated with cluster name: $CLUSTER_NAME"
echo ""
echo "Authentication setup completed successfully!"
echo "The following resources have been created in namespace '$NAMESPACE':"
echo "  - server-ca-bundle: Contains the Service CA certificate"
echo "  - consumer-client-certs: Contains the client TLS certificate (auto-generated by Service CA)"
echo "  - consumer-auth-config: Contains authentication configuration with OAuth issuer for $CLUSTER_NAME"
echo ""
echo "The consumer pod should now be able to start with mTLS and OAuth authentication enabled."
