{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Rest API spec .",
    "title": "Pub/Sub Rest API.",
    "contact": {
      "name": "Aneesh Puttur",
      "email": "aputtur@redhat.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "paths": {
    "/create/event/": {
      "post": {
        "description": "If publisher is present for the event, then event creation is success and be returned with Accepted (202).",
        "tags": [
          "event"
        ],
        "summary": "Creates a new event.",
        "operationId": "publishEvent",
        "parameters": [
          {
            "description": "event along with publisher id",
            "name": "event",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/acceptedReq"
          },
          "400": {
            "$ref": "#/responses/badReq"
          }
        }
      }
    },
    "/publishers/": {
      "post": {
        "description": "If publisher creation is success(or if already exists), publisher will be returned with Created (201).",
        "tags": [
          "publishers"
        ],
        "summary": "Creates a new publisher.",
        "operationId": "createPublisher",
        "parameters": [
          {
            "description": "publisher to add to the list of publishers",
            "name": "publisher",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PubSub"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/pubSubResp"
          },
          "400": {
            "$ref": "#/responses/badReq"
          }
        }
      }
    },
    "/subscriptions/": {
      "post": {
        "description": "If subscription creation is success(or if already exists), subscription will be returned with Created (201).",
        "tags": [
          "subscription"
        ],
        "summary": "Creates a new subscription.",
        "operationId": "createSubscription",
        "parameters": [
          {
            "description": "subscription to add to the list of subscriptions",
            "name": "subscription",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PubSub"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/pubSubResp"
          },
          "400": {
            "$ref": "#/responses/badReq"
          }
        }
      }
    }
  },
  "definitions": {
    "Data": {
      "description": "Data ... cloud native events data\nData Json payload is as follows,\n{\n\"version\": \"v1.0\",\n\"values\": [{\n\"resource\": \"/cluster/node/ptp\",\n\"dataType\": \"notification\",\n\"valueType\": \"enumeration\",\n\"value\": \"ACQUIRING-SYNC\"\n}, {\n\"resource\": \"/cluster/node/clock\",\n\"dataType\": \"metric\",\n\"valueType\": \"decimal64.3\",\n\"value\": 100.3\n}]\n}",
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataValue"
          },
          "x-go-name": "Values"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/event"
    },
    "DataType": {
      "type": "string",
      "title": "DataType ...",
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/event"
    },
    "DataValue": {
      "description": "DataValue Json payload is as follows,\n{\n\"resource\": \"/cluster/node/ptp\",\n\"dataType\": \"notification\",\n\"valueType\": \"enumeration\",\n\"value\": \"ACQUIRING-SYNC\"\n}",
      "type": "object",
      "title": "DataValue ...",
      "properties": {
        "dataType": {
          "$ref": "#/definitions/DataType"
        },
        "resource": {
          "type": "string",
          "x-go-name": "Resource"
        },
        "value": {
          "type": "object",
          "x-go-name": "Value"
        },
        "valueType": {
          "$ref": "#/definitions/ValueType"
        }
      },
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/event"
    },
    "Event": {
      "description": "Event Json  payload is as follows,\n{\n\"id\": \"5ce55d17-9234-4fee-a589-d0f10cb32b8e\",\n\"type\": \"event.synchronization-state-chang\",\n\"time\": \"2021-02-05T17:31:00Z\",\n\"data\": {\n\"version\": \"v1.0\",\n\"values\": [{\n\"resource\": \"/cluster/node/ptp\",\n\"dataType\": \"notification\",\n\"valueType\": \"enumeration\",\n\"value\": \"ACQUIRING-SYNC\"\n}, {\n\"resource\": \"/cluster/node/clock\",\n\"dataType\": \"metric\",\n\"valueType\": \"decimal64.3\",\n\"value\": 100.3\n}]\n}\n}\nEvent request model",
      "type": "object",
      "title": "Event represents the canonical representation of a Cloud Native Event.",
      "properties": {
        "data": {
          "$ref": "#/definitions/Data"
        },
        "dataContentType": {
          "description": "DataContentType - the Data content type\n+required",
          "type": "string",
          "x-go-name": "DataContentType"
        },
        "dataSchema": {
          "$ref": "#/definitions/URI"
        },
        "id": {
          "description": "ID of the event; must be non-empty and unique within the scope of the producer.\n+required",
          "type": "string",
          "x-go-name": "ID"
        },
        "time": {
          "$ref": "#/definitions/Timestamp"
        },
        "type": {
          "description": "Type - The type of the occurrence which has happened.\n+required",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/event"
    },
    "PubSub": {
      "description": "PubSub Json request payload is as follows,\n{\n\"id\": \"789be75d-7ac3-472e-bbbc-6d62878aad4a\",\n\"endpointUri\": \"http://localhost:9090/ack/event\",\n\"uriLocation\":  \"http://localhost:8080/api/ocloudNotifications/v1/publishers/{publisherid}\",\n\"resource\":  \"/east-edge-10/vdu3/o-ran-sync/sync-group/sync-status/sync-state\"\n}\nPubSub request model",
      "type": "object",
      "title": "PubSub represents the canonical representation of a Cloud Native Event Publisher and Subscribers .",
      "properties": {
        "endpointUri": {
          "$ref": "#/definitions/URI"
        },
        "id": {
          "description": "ID of the pub/sub; is updated on successful creation of publisher/subscription.",
          "type": "string",
          "x-go-name": "ID"
        },
        "resource": {
          "description": "Resource - The type of the Resource.\n+required",
          "type": "string",
          "x-go-name": "Resource"
        },
        "uriLocation": {
          "$ref": "#/definitions/URI"
        }
      },
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/pubsub"
    },
    "Timestamp": {
      "description": "Timestamp wraps time.Time to normalize the time layout to RFC3339. It is\nintended to enforce compliance with the Cloud Native events spec for their\ndefinition of Timestamp. Custom marshal methods are implemented to ensure\nthe outbound Timestamp is a string in the RFC3339 layout.",
      "type": "object",
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/types"
    },
    "URI": {
      "description": "URI is a wrapper to url.URL. It is intended to enforce compliance with\nthe Cloud Native Events spec for their definition of URI. Custom\nmarshal methods are implemented to ensure the outbound URI object\nis a flat string.",
      "type": "object",
      "properties": {
        "ForceQuery": {
          "type": "boolean"
        },
        "Fragment": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "Opaque": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "RawFragment": {
          "type": "string"
        },
        "RawPath": {
          "type": "string"
        },
        "RawQuery": {
          "type": "string"
        },
        "Scheme": {
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/Userinfo"
        }
      },
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/types"
    },
    "Userinfo": {
      "description": "The Userinfo type is an immutable encapsulation of username and\npassword details for a URL. An existing Userinfo value is guaranteed\nto have a username set (potentially empty, as allowed by RFC 2396),\nand optionally a password.",
      "type": "object",
      "x-go-package": "net/url"
    },
    "ValueType": {
      "type": "string",
      "title": "ValueType ...",
      "x-go-package": "github.com/redhat-cne/sdk-go/pkg/event"
    }
  },
  "responses": {
    "acceptedReq": {
      "description": "Accepted",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 202 -  Accepted",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "badReq": {
      "description": "Error Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 400 -  Bad Request",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "eventResp": {
      "description": "PubSub request model",
      "schema": {
        "$ref": "#/definitions/Event"
      }
    },
    "notFoundReq": {
      "description": "Error Not Found",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 404 -  Not Found",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "pubSubResp": {
      "description": "publisher/subscription data model",
      "schema": {
        "$ref": "#/definitions/PubSub"
      }
    }
  }
}